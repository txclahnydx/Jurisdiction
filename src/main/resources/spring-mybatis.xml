<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd"
	default-lazy-init="false">
	
	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
	    <property name="driverClassName" value="${jdbc.driver}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="minIdle" value="${jdbc.minIdle}" /> 
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />
		<property name="maxOpenPreparedStatements"  value="${jdbc.maxOpenPreparedStatements}" />
		<property name="removeAbandoned"  value="${jdbc.removeAbandoned}" />
		<property name="removeAbandonedTimeout"  value="${jdbc.removeAbandonedTimeout}" />
		<property name="logAbandoned"  value="${jdbc.logAbandoned}" />
		<property name="timeBetweenLogStatsMillis"  value="${jdbc.timeBetweenLogStatsMillis}" />
		<!-- 配置监控统计拦截的filters -->
	    <property name="proxyFilters">
               <list>
	                 <ref bean="stat-filter" />
	                 <ref bean="wall-filter" />
	                 <ref bean="log-filter" />
               </list>
       </property>
	</bean>
	
	<!-- 监控统计配置 -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
           <property name="mergeSql" value="true" />
           <property name="slowSqlMillis" value="10000" />
           <property name="logSlowSql" value="true" />
    </bean>
    
   <!--  SQL防火墙 -->
    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
          <property name="dbType" value="mysql" />
          <property name="logViolation" value="true"></property>
          <property name="throwException" value="false"></property>
          <property name="config" value="wall-filter-config"></property>
    </bean>
    
    <!--  SQL防火墙配置 -->
    <bean id="wall-filter-config" class="com.alibaba.druid.wall.WallConfig"  init-method="init">
          <property name="dir" value="META-INF/druid/wall/mysql" />
    </bean>
    
    <!--  SQL日志打印 -->
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter"> 
          <property name="statementExecutableSqlLogEnable"  value="false" />
    </bean>
    
     <!-- MyBatis domain mapper -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
    </bean>
    
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.ruyidd.*.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
    
    <!-- 定义事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>	
	
</beans>